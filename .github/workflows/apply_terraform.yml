name: Apply Terraform plan and validate
run-name: Apply Terraform plan and validate (triggered by @${{ github.actor }})

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types:
      - closed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  generate_tf:
    name: Generate Terraform files and plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' 
          cache: 'pip'

      - name: Install tf-generator dependencies
        run: pip install -r tf-generator/requirements.txt

      - name: Run tf-generator
        run: python tf-generator/app.py config.yml

      - name: Run terraform commands
        run: |
          cd terraform-files
          terraform init
          terraform fmt
          terraform validate
          terraform plan -out tfplan

      - name: Upload terraform files
        uses: actions/upload-artifact@v3
        with:
          name: terraform-files-${{github.event.pull_request.number}}
          path: |
            terraform-files
            !terraform-files/.terraform*

      - name: Post artifact messgae
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚úÖ **Terraform files generated and deployment plan created.**\n\nüîó [View artifacts](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })

      - name: Post failure message
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ùå **Terraform files generation failed.**\n\nüîó [View failed run](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })
  
  apply_tf:
    if: github.event.pull_request.merged == true
    name: Apply terraform plan 
    runs-on: ubuntu-latest
    needs: generate_tf

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download terraform files
        uses: actions/download-artifact@v2
        with:
          name: terraform-files-${{github.event.pull_request.number}}
          path: terraform-files

      - name: Run terraform commands
        run: |
          cd terraform-files
          terraform init
          terraform apply -auto-approve tfplan
          terraform output -json > ./terraform-output.json

      - name: Upload terraform output
        uses: actions/upload-artifact@v2
        with:
          name: terraform-out-${{github.event.pull_request.number}}
          path: terraform-files/terraform-output.json

      - name: Post success messgae
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚úÖ **Deployment plan applied successfully.**"
            })
  
      - name: Post failure message
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ùå **Deployment plan failed.**\n\nüîó [View failed run](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })

  setup_k8s:
    needs: apply_tf
    name: Run k8s setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' 
          cache: 'pip'

      - name: Install k8s-primer dependencies
        run: pip install -r k8s-primer/requirements.txt

      # - name: Download terraform output
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: terraform-out-{{github.event.pull_request.number}}}

      # - name: Set variables
      #   run: |
      #     CLUSTER_NAME = $(jq -r '.cluster_name.value' terraform-output.json)
      #     echo "CLUSTER_NAME=$CLUSTER_NAME"

      # - name: Wait for cluster to become available
      #   run: |
      #     while true; do
      #       cluster_status=$(aws eks describe-cluster --name $CLUSTER_NAME --query cluster.status --output text)
      #       if [ $cluster_status == "ACTIVE" ]; then
      #         break
      #       fi
      #       sleep 60
      #     done
      
      - name: Run k8s-primer
        run: python k8s-primer/app.py config.yml

      - name: Post success messgae
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚úÖ **Kubernetes cluster is configured successfully.**"
            })

      - name: Post failure message
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ùå **Kubernetes configuration failed.**\n\nüîó [View failed run](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })

  validate_deployment:
    needs: setup_k8s
    name: Validate deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' 
          cache: 'pip'

      - name: Install deployment-validator dependencies
        run: pip install -r deployment-validator/requirements.txt

      - name: Download terraform output
        uses: actions/download-artifact@v2
        with:
          name: terraform-out-${{github.event.pull_request.number}}

      - name: Run deployment-validator
        run: python deployment-validator/app.py terraform-output.json config.yml
      
      - name: Post success messgae
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚úÖ **Deployment successfully validated.**\n\nüîó [View artifacts](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })

      - name: Post failure message
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ùå **Deployment validation failed.**\n\nüîó [View failed run](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})"
            })